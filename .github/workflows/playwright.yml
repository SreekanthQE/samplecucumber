name: Cucumber Playwright Tests

on:
  workflow_dispatch:
    inputs:
      browser:
        description: 'Choose the browser'
        required: true
        default: 'chromium'
        type: choice
        options:
          - chromium
          - firefox
          - webkit
      tag:
        description: 'Tag to run (e.g. @smoke)'
        required: false
      feature:
        description: 'Feature file path (e.g. features/login.feature)'
        required: false
        default: 'src/features'
      baseURL:
        description: 'Base URL to test against'
        required: true
        default: 'https://automationteststore.com'
      scenario:
        description: 'Scenario title (e.g. Validate successful login)'
        required: false

jobs:
  run-cucumber-playwright:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Install dependencies
        run: npm install

      - name: Install Playwright browsers
        run: npx playwright install

      - name: Run Cucumber tests
        run: |
          echo "BROWSER: ${{ github.event.inputs.browser }}"
          echo "TAG: ${{ github.event.inputs.tag }}"
          echo "FEATURE: ${{ github.event.inputs.feature }}"
          echo "SCENARIO: ${{ github.event.inputs.scenario }}"
          echo "BASE_URL: ${{ github.event.inputs.baseURL }}"

          export BROWSER=${{ github.event.inputs.browser }}
          export BASE_URL=${{ github.event.inputs.baseURL }}

          CMD="npx cucumber-js ${{ github.event.inputs.feature }} --exit"

          if [ ! -z "${{ github.event.inputs.tag }}" ]; then
            CMD="$CMD --tags '${{ github.event.inputs.tag }}'"
          fi

          if [ ! -z "${{ github.event.inputs.scenario }}" ]; then
            CMD="$CMD --name '${{ github.event.inputs.scenario }}'"
              echo "Running: $CMD"
          eval $CMD

      - name: List allure-results contents
        run: ls -l allure-results || echo "allure-results folder does not exist"

      - name: Install Allure results plugin
        run: npm install -D @shelex/allure-cucumberjs

      - name: Generate Allure report
        run: |
          npm install -g allure-commandline --no-save
          allure generate allure-results --clean -o allure-report

      - name: Upload Allure report artifact
        uses: actions/upload-artifact@v4
        with:
          name: allure-report
          path: allure-report
